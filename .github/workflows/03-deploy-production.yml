name: 03 - Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production

env:
  NODE_VERSION: '18'
  DEPLOY_PATH_PROD: '/home/dynamtek/apps/production'

jobs:
  validate-input:
    name: Validate Deployment Request
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "DEPLOY" ]; then
            echo "❌ Deployment cancelled: confirmation text incorrect"
            echo "You entered: ${{ github.event.inputs.confirm }}"
            echo "Required: DEPLOY"
            exit 1
          fi
          echo "✅ Deployment confirmed by ${{ github.actor }}"
          echo "🕐 Time: $(date)"
          echo "📍 Branch: ${{ github.ref }}"

  pre-deploy-checks:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    needs: validate-input

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build All Services
        run: npm run build --workspace=apps/web

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🔍 Check Server Status
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_PRODUCTION }} << 'ENDSSH'
            set -e

            # Load NVM and Node.js
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            echo "📊 Current System Status:"
            echo "==================================="
            echo "🔧 PM2 Status:"
            pm2 status || echo "PM2 not running"
            echo ""
            echo "💾 Disk Usage:"
            df -h | grep -E "Filesystem|/$"
            echo ""
            echo "🧠 Memory:"
            free -h
            echo ""
            echo "⏰ System Uptime:"
            uptime
            echo "==================================="
          ENDSSH

  backup-current:
    name: Backup Current Version
    runs-on: ubuntu-latest
    needs: pre-deploy-checks

    steps:
      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 💾 Create Backup
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_PRODUCTION }} << 'ENDSSH'
            BACKUP_DIR="/home/dynamtek/backups/$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR

            echo "📦 Creating backup at: $BACKUP_DIR"

            # Backup PM2 configuration
            pm2 save
            cp ~/.pm2/dump.pm2 $BACKUP_DIR/ 2>/dev/null || true

            # Backup .env files
            if [ -d "${{ env.DEPLOY_PATH_PROD }}" ]; then
              find ${{ env.DEPLOY_PATH_PROD }}/apps -name ".env" -exec cp {} $BACKUP_DIR/ \; 2>/dev/null || true

              # Save current git commit
              cd ${{ env.DEPLOY_PATH_PROD }}
              git rev-parse HEAD > $BACKUP_DIR/commit.txt 2>/dev/null || true
            fi

            echo "✅ Backup created successfully!"
            echo "📍 Location: $BACKUP_DIR"
            ls -lh $BACKUP_DIR
          ENDSSH

  deploy-sync-service:
    name: Deploy Sync Service (FIRST)
    runs-on: ubuntu-latest
    needs: backup-current

    steps:
      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy Sync Service
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_PRODUCTION }} << 'ENDSSH'
            set -e

            echo "🔄 Deploying Sync Service..."

            # Clone or pull repo
            if [ -d "${{ env.DEPLOY_PATH_PROD }}/.git" ]; then
              cd ${{ env.DEPLOY_PATH_PROD }}
              git fetch origin
              git checkout main
              git pull origin main
            else
              git clone -b main git@github.com:saqh5037/laboratorio-eg-system.git ${{ env.DEPLOY_PATH_PROD }}
              cd ${{ env.DEPLOY_PATH_PROD }}
            fi

            cd apps/sync-service
            npm ci --production

            pm2 restart sync-service-prod || pm2 start ecosystem.config.js --env production --name sync-service-prod
            pm2 save

            sleep 10

            # Health check
            curl -f http://localhost:3002/health || curl -f http://localhost:3002/api/stats || echo "⚠️ Health check not available"

            # Check logs for errors
            pm2 logs sync-service-prod --lines 20 --nostream | grep -i error && exit 1 || true

            echo "✅ Sync Service deployed successfully!"
          ENDSSH

  deploy-results-api:
    name: Deploy Results API (SECOND)
    runs-on: ubuntu-latest
    needs: deploy-sync-service

    steps:
      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy Results API
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_PRODUCTION }} << 'ENDSSH'
            set -e

            echo "🔄 Deploying Results API..."
            cd ${{ env.DEPLOY_PATH_PROD }}/apps/results-api

            npm ci --production

            pm2 restart results-api-prod || pm2 start ecosystem.config.js --env production --name results-api-prod
            pm2 save

            sleep 10
            curl -f http://localhost:3003/api/health || exit 1

            echo "✅ Results API deployed successfully!"
          ENDSSH

  deploy-messaging-bot:
    name: Deploy Messaging Bot (THIRD)
    runs-on: ubuntu-latest
    needs: deploy-results-api

    steps:
      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy Messaging Bot
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_PRODUCTION }} << 'ENDSSH'
            set -e

            echo "🔄 Deploying Messaging Bot..."
            cd ${{ env.DEPLOY_PATH_PROD }}/apps/messaging-bot

            npm ci --production

            pm2 restart messaging-bot-prod || pm2 start ecosystem.config.js --env production --name messaging-bot-prod
            pm2 save

            sleep 10
            curl -f http://localhost:3004/api/health || echo "⚠️ Health check not available"

            echo "✅ Messaging Bot deployed successfully!"
          ENDSSH

  deploy-frontend:
    name: Deploy Frontend PWA (LAST)
    runs-on: ubuntu-latest
    needs: deploy-messaging-bot

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install & Build
        working-directory: ./apps/web
        run: |
          npm ci
          npm run build
        env:
          VITE_API_URL: https://api.laboratorio-eg.com
          VITE_APP_ENV: production

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 📤 Deploy Frontend
        run: |
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./apps/web/dist/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_PRODUCTION }}:/var/www/laboratorio-eg/

      - name: 🔄 Reload Nginx
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_PRODUCTION }} \
            "sudo nginx -t && sudo systemctl reload nginx"
        continue-on-error: true

  post-deploy-verification:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-sync-service, deploy-results-api, deploy-messaging-bot, deploy-frontend]

    steps:
      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: ✅ Verify All Services
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_PRODUCTION }} << 'ENDSSH'
            echo "📊 Verifying all services..."
            echo "==================================="

            pm2 status

            echo ""
            echo "🔍 Health Checks:"

            echo "Checking Sync Service..."
            curl -f http://localhost:3002/health || curl -f http://localhost:3002/api/stats || echo "❌ Sync Service unhealthy"

            echo "Checking Results API..."
            curl -f http://localhost:3003/api/health || echo "❌ Results API unhealthy"

            echo "Checking Messaging Bot..."
            curl -f http://localhost:3004/api/health || echo "❌ Messaging Bot unhealthy"

            echo ""
            echo "✅ Verification complete!"
            echo "==================================="
          ENDSSH

      - name: 📊 Monitor for 30 seconds
        run: |
          echo "📡 Monitoring services for 30 seconds..."
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_PRODUCTION }} \
            "pm2 logs --lines 0 --timestamp & PID=\$! && sleep 30 && kill \$PID"

  notify-success:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: post-deploy-verification

    steps:
      - name: 📢 Send Success Notification
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo "📦 Commit: ${{ github.sha }}"
          echo "🕐 Time: $(date)"
          echo "🌍 Environment: production"
